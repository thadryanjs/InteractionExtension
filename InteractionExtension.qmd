---
title: "InteractionExtension"
---

```{r}

# reproducible R environments
library(groundhog)

# dependencies
pkgs <- c(
  "dplyr",
  "ggplot2",
  "stringr",
  "ggcorrplot",
  "MASS", 
  "Matrix"
)

# activate libraries
suppressMessages(groundhog.library(pkgs, "2023-03-01"))
```



```{r}

# create a sample sheet
meta <- data.frame(
  sampleID = paste0("Sample", seq(1,9)),
  river = paste0("River", rep(seq(1,3), each = 3)),
  site = rep(paste0("Site", c(1,2,3)), 3)
)

meta$river_site <- paste(meta$rive, ":", meta$site, sep = "")
meta
```

Let's say there is a river-level correlation. This means:

  - There should be correlation between columns 1-3, 4-6, and 7-9.

Let's assume there is a site-level correlation. For instance, perhaps a level of a contaminant is high near the source and decays as you move further down the rive (up in site number). This means:

  - There should be a correlation between instances of `Site1`s, `Site2`s, and `Site3`s that is steadily decreasing.

```{r}
meta$river_site
```

```{r}

complexCorMatrix <- function(meta, effect1, effect2)
{

  n <- ncol(meta)

  effect1_levels <- unique(meta[, effect1$name])
  effect2_levels <- unique(meta[, effect2$name])

  interactions <- paste(meta[, effect1$name], ":",
      meta[, effect2$name], sep = "")
  
  n <- length(interactions)
  
  # df <- data.frame(matrix(0, nrow = n, ncol = n))
  df <- data.frame(as.matrix(Diagonal(n, 1)))
  rownames(df) <- interactions
  colnames(df) <- interactions


  for(i in 1:n){
    icol <- colnames(df)[i]
    
    for(j in 1:n){
      jcol <- rownames(df)[j]

      if(!(df[jcol, icol]==1)){
      
        for(i in 1:length(effect1_levels)) {
          if(str_detect(icol, effect1_levels[i])) {
            df[jcol, icol] <- df[jcol, icol] + effect1$cors[i]
          }
        }

        for(i in 1:length(effect2_levels)) {
          if(str_detect(jcol, effect2_levels[i])) {
            df[jcol, icol] <- df[jcol, icol] + effect2$cors[i]
          }
        }
      }

    }
  }


  df
}


x <- complexCorMatrix(meta,
  list(name = "river", cors = c(0.3, 0.4, 0.5)),
  list(name = "site", cors = c(0.2, 0.3, 0.4))
)
```

```{r}
x
```

```{r}
ggcorrplot(x,
  lab = TRUE,
  type = "lower",
  colors = c("orange", "white", "#00693e")
) 
```

```{r}

# for(s in c("one", "two", "three")) {
#   if(grep("o", s)) {
#     print("hello")
#   }
# }
```

```{r}

# sigma <- matrix(
#   c(
#     0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0,
#     0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5
#   ), 9,9
# ) %>% t

# sigma %>% data.frame()

# (d <- Diagonal(n = 9, x = 0.5))
```








```{r}
set.seed(1)

x <- runif(100)

x %>% head
```

```{r}

# compute distance matrix, d_{ij} = |x_i - x_j|
d <- abs(outer(x,x,"-")) 

d %>% length

d %>% head
```

```{r}

# length scale
l <- 1
```

```{r}

# squared exponential kernel
Sigma_SE <- exp(-d^2/(2*l^2)) 

Sigma_SE %>% head
```

```{r}

y <- mvtnorm::rmvnorm(1, sigma = Sigma_SE)
```

```{r}

plot(x,y)
```






